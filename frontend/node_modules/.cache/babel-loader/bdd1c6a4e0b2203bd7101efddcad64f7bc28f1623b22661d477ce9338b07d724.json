{"ast":null,"code":"var _s = $RefreshSig$();\nimport { configureStore } from '@reduxjs/toolkit';\nimport chatReducer from './chatSlice';\nexport const store = configureStore({\n  reducer: {\n    chat: chatReducer\n  }\n});\n// Create typed hooks\nimport { useDispatch, useSelector } from 'react-redux';\nexport const useAppDispatch = () => {\n  _s();\n  return useDispatch();\n};\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport const useAppSelector = useSelector;","map":{"version":3,"names":["configureStore","chatReducer","store","reducer","chat","useDispatch","useSelector","useAppDispatch","_s","useAppSelector"],"sources":["E:/project-bolt-sb1-cb5utn1q/project/frontend/src/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport chatReducer from './chatSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    chat: chatReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n// Create typed hooks\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector; "],"mappings":";AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa;AAErC,OAAO,MAAMC,KAAK,GAAGF,cAAc,CAAC;EAClCG,OAAO,EAAE;IACPC,IAAI,EAAEH;EACR;AACF,CAAC,CAAC;AAKF;AACA,SAA+BI,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAC5E,OAAO,MAAMC,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMH,WAAW,CAAc,CAAC;AAAA;AAACG,EAAA,CAAlDD,cAAc;EAAA,QAASF,WAAW;AAAA;AAC/C,OAAO,MAAMI,cAA+C,GAAGH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}